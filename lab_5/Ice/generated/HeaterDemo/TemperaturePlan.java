//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `heater.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package HeaterDemo;

public class TemperaturePlan implements java.lang.Cloneable,
                                        java.io.Serializable
{
    public long id;

    public float temp;

    public String startTime;

    public String endTime;

    public TemperaturePlan()
    {
        this.startTime = "";
        this.endTime = "";
    }

    public TemperaturePlan(long id, float temp, String startTime, String endTime)
    {
        this.id = id;
        this.temp = temp;
        this.startTime = startTime;
        this.endTime = endTime;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TemperaturePlan r = null;
        if(rhs instanceof TemperaturePlan)
        {
            r = (TemperaturePlan)rhs;
        }

        if(r != null)
        {
            if(this.id != r.id)
            {
                return false;
            }
            if(this.temp != r.temp)
            {
                return false;
            }
            if(this.startTime != r.startTime)
            {
                if(this.startTime == null || r.startTime == null || !this.startTime.equals(r.startTime))
                {
                    return false;
                }
            }
            if(this.endTime != r.endTime)
            {
                if(this.endTime == null || r.endTime == null || !this.endTime.equals(r.endTime))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::HeaterDemo::TemperaturePlan");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, temp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, startTime);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, endTime);
        return h_;
    }

    public TemperaturePlan clone()
    {
        TemperaturePlan c = null;
        try
        {
            c = (TemperaturePlan)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeLong(this.id);
        ostr.writeFloat(this.temp);
        ostr.writeString(this.startTime);
        ostr.writeString(this.endTime);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.id = istr.readLong();
        this.temp = istr.readFloat();
        this.startTime = istr.readString();
        this.endTime = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, TemperaturePlan v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public TemperaturePlan ice_read(com.zeroc.Ice.InputStream istr)
    {
        TemperaturePlan v = new TemperaturePlan();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<TemperaturePlan> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, TemperaturePlan v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<TemperaturePlan> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(TemperaturePlan.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final TemperaturePlan _nullMarshalValue = new TemperaturePlan();

    /** @hidden */
    public static final long serialVersionUID = 291890742L;
}
